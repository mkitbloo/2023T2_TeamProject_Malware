import os
import sys
import volatility.conf as conf
import volatility.registry as registry
import volatility.commands as commands
import volatility.win32 as win32

# Function to list running processes
def list_running_processes(memory_file_path, profile):
    # Initialize Volatility configuration
    config = conf.ConfObject()
    registry.PluginImporter()
    config.parse_options()

    # Create a configuration object for the memory dump
    config.PROFILE = profile

    # Load the memory dump
    try:
        memory_file = open(memory_file_path, "rb")
        memory_file_data = memory_file.read()
        memory_file.close()
    except IOError as e:
        print(f"Error reading memory dump file: {str(e)}")
        sys.exit(1)

    # Create a configuration object for the Volatility framework
    config.LOCATION = "file://%s" % memory_file_path
    config.PARADIGM = "x86"  # Adjust to "x64" if necessary

    # Run the pslist plugin to list running processes
    command = commands.Command("pslist", config)
    output = command.render_text()

    # Print the list of running processes
    print(output)

if __name__ == "__main__":
    # Replace 'path_to_memory_dump' with the path to your memory dump file
    memory_dump_file = 'path_to_memory_dump'

    # Replace 'WinXPSP2x86' with the appropriate profile for your memory dump
    # You can list available profiles using 'volatility -f path_to_memory_dump imageinfo'
    volatility_profile = 'WinXPSP2x86'

    # Check if the memory dump file exists
    if not os.path.isfile(memory_dump_file):
        print(f"Memory dump file '{memory_dump_file}' not found.")
        sys.exit(1)

    # List running processes in the memory dump
    list_running_processes(memory_dump_file, volatility_profile)
