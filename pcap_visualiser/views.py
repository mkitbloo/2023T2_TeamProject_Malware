from django.shortcuts import render
from .forms import *
from .models import *
from .graph import *
from .utils import load_file
from django.contrib import messages
from django.conf import settings
import os
import random


def index(request):
    return render(request, 'index.html')

def upload(request):
    # Handle file upload and redirect to results page
    if request.method == 'POST':
        form = PcapFileForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()

            # get the form data
            pcap_file = form.cleaned_data['pcap_file']
            layer = form.cleaned_data['layer']
            whitelist = form.cleaned_data['whitelist']
            blacklist = form.cleaned_data['blacklist']
            layout = form.cleaned_data['layout']
            shape = form.cleaned_data['shape']
            nmax = int(form.cleaned_data['nmax'])

            # load the pcap file
            packets = load_file([os.path.join(settings.MEDIA_ROOT, 'uploads', 'pcap', pcap_file.name)])

            if whitelist != None and blacklist != None:
                #send error message
                messages.error(request, 'Please specify either a whitelist or a blacklist, not both.')

                # redirect to upload page
                return render(request, 'upload.html', {'form': form})

            if whitelist:
                wl = [llook[x] for x in whitelist]
                packets = [x for x in pin if sum([x.haslayer(y) for y in wl]) > 0 and x != None]

            elif blacklist:
                bl = [llook[x] for x in blacklist]
                packets = [x for x in pin if sum([x.haslayer(y) for y in bl]) == 0 and x != None]

            params = {
                'pcap_file': pcap_file,
                'whitelist': whitelist,
                'blacklist': blacklist,
                'layer': layer,
                'layout': layout,
                'shape': shape,
                'nmax': nmax,
            }
            g = PcapGraph(packets, layer, params)
            nn = len(g.graph.nodes())
            if nn > nmax:
                print('Asked to draw %d nodes with --nmax set to %d. Will also do useful protocols separately' % (nn,params.nmax))
                for kind in llook.keys():
                    subset = [x for x in packets if x.haslayer(kind) and x != None]  
                    if len(subset) > 2:
                        sg = PcapGraph(subset,layer=layer, params=params)
                        nn = len(sg.graph.nodes())
                        if nn > 2:
                            ofn = '%s_%d_%s' % (kind,nn,params.out)
                            sg.draw(filename = ofn)
                            print('drew %s %d nodes' % (ofn,nn))
                            
            # use random to generate random filename
            random_filename = ''.join(random.choice(string.ascii_letters) for i in range(10))
            g.draw(filename = random_filename.join('.svg'))

            g.get_in_degree()
            
            graph = g.get_graphviz_format()
            
            uploads = f'uploads/test.svg'
            
            # redirect to results page
            return render(request, 'results.html', {'graph': graph, 'uploads': uploads})

    else:
        form = PcapFileForm()

    return render(request, 'upload.html', {'form': form})

def results(request):
    return render(request, 'results.html')

