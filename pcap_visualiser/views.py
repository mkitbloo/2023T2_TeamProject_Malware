from django.shortcuts import render
from .forms import *
from .models import *
from .graph import *
from .utils import load_file
from django.contrib import messages
from django.conf import settings
from scapy.all import *
import os
import random


llook = {'DNS':DNS,'UDP':UDP,'ARP':ARP,'NTP':NTP,'IP':IP,'TCP':TCP,'Raw':Raw,'HTTP':HTTP,'RIP':RIP,'RTP':RTP}
def index(request):
    return render(request, 'index.html')

def upload(request):
    # Handle file upload and redirect to results page
    if request.method == 'POST':
        form = PcapFileForm(request.POST, request.FILES)
        if form.is_valid():
            # get the form data
            pcap_file = form.cleaned_data['pcap_file']
            layer = form.cleaned_data['layer']
            whitelist = form.cleaned_data['whitelist']
            blacklist = form.cleaned_data['blacklist']
            layout = form.cleaned_data['layout']
            shape = form.cleaned_data['shape']
            nmax = int(form.cleaned_data['nmax'])
            geo_database = form.cleaned_data['geo_database']

            form.save()

            # load the pcap file
            packets = load_file([os.path.join(settings.MEDIA_ROOT, 'uploads', 'pcap', pcap_file.name)])
            
            # load geoip database
            filepath = os.path.join(settings.MEDIA_ROOT, 'uploads', 'geodb', geo_database)
            geo_ip = maxminddb.open_database(filepath)

            # store the parameters in a dict
            args = {'layer': layer, 'layout': layout, 'shape': shape, 'whitelist': whitelist, 'blacklist': blacklist, 'nmax': nmax, 'geo_database': geo_database}

            if whitelist and blacklist:
                messages.error(request, 'Please specify either  a whitelist or a blacklist, not both.')
                # return render(request, 'upload.html', {'form': form})

            # filter the packets
            if whitelist:
                wl = [llook[x] for x in whitelist]
                packets = [x for x in packets if sum([x.haslayer(y) for y in wl]) > 0 and x != None]

            elif blacklist:
                bl = [llook[x] for x in blacklist]
                packets = [x for x in packets if sum([x.haslayer(y) for y in bl]) == 0 and x != None]  

            # create the graph
            g = PcapGraph(packets, layer, args)

            # check if the graph is empty
            nn = len(g.graph.nodes())
            if nn > nmax:
                print('Asked to draw %d nodes with --nmax set to %d. Will also do useful protocols separately' % (nn,params.nmax))
                
                # draw individual protocols where useful if more than nmax nodes
                for kind in llook.keys():
                    subset = [x for x in packets if x.haslayer(kind) and x != None]  
                    if len(subset) > 2:
                        sg = PcapGraph(subset,layer=layer, args=args)
                        nn = len(sg.graph.nodes())

                        # draw the graph if it has more than 2 nodes
                        if nn > 2:
                            ofn = '%s_%d_%s' % (kind,nn,args.out)
                            sg.draw(filename = ofn)
                            print('drew %s %d nodes' % (ofn,nn))
                            
            # use timestamp to generate random filename
            filename = f'{time.strftime("%Y%m%d-%H%M%S")}.svg'
            g.draw(filename = filename)
            
            # redirect to results page
            return render(request, 'results.html', {'filename': filename})

    # if a GET (or any other method) we'll create a blank form
    else:
        form = PcapFileForm()

    return render(request, 'upload.html', {'form': form})


def results(request):
    return render(request, 'results.html')

