from django.shortcuts import render, redirect
from .forms import FileUploadForm
from .models import UploadedFile, GeneratedGraph
from Visualize_Logs.objects.ProcMonCSV import ProcMonCSV
from django.conf import settings
from django.contrib import messages
import os

def upload_file(request):
    if request.method == 'POST':
        form = FileUploadForm(request.POST, request.FILES)
        if form.is_valid():
            instance = form.save()
            csvfile_path = instance.file.path
            generated_graph_name = f"{os.path.splitext(os.path.basename(csvfile_path))[0]}.html"
            media_root = settings.MEDIA_ROOT
            generated_graph_path = os.path.join(media_root, 'generated_graphs', generated_graph_name)
            try:
                # Try running ProcMonCSV
                ProcMonCSV(csvfile_path).plotgraph(
                    filename=generated_graph_path,
                    title="Title",
                    plotfilewrites=False,
                    plotfilereads=False,
                    plotfiledeletes=False,
                    plotfilerenames=False,
                    plottcpconnects=False,
                    plotudpsends=False,
                    plotudprecvs=False,
                    plotregreads=False,
                    plotregwrites=False,
                    plotregdeletes=False,
                    showproclabels=True,
                    showtcplabels=False,
                    showudplabels=False,
                    showfilelabels=False,
                    showhostlabels=False,
                    showreglabels=False,
                    graphvizprog=None
                )
                # If ProcMonCSV succeeds, create a GeneratedGraph entry
                GeneratedGraph.objects.create(
                    original_file=instance,
                    generated_graph=f"generated_graphs/{generated_graph_name}"
                )
                return redirect('file_list')
            except Exception as e:
                # Handle the exception
                messages.error(request, f"Error processing the file: {str(e)}")
                # Redirect back to the upload page with the error message
                return redirect('upload_file')
    else:
        form = FileUploadForm()
    return render(request, 'logs_visualizing/upload.html', {'form': form})

def file_list(request):
    files = UploadedFile.objects.all()
    graphs = GeneratedGraph.objects.all()
    return render(request, 'logs_visualizing/file_list.html', {'files': files, 'graphs': graphs})