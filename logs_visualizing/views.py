from django.shortcuts import render, redirect
from .forms import FileUploadForm
from .models import UploadedFile, GeneratedGraph
from Visualize_Logs.objects.ProcMonCSV import ProcMonCSV
from django.conf import settings
from django.contrib import messages
from django.utils.html import format_html
import logs_visualizing.Noriben
import os, subprocess, shutil

def from_csv_to_graph(csvfile_path): # Takes in csv path, return graph name
    generated_graph_name = f"{os.path.splitext(os.path.basename(csvfile_path))[0]}.html"
    media_root = settings.MEDIA_ROOT
    generated_graph_path = os.path.join(media_root, 'generated_graphs', generated_graph_name)
    ProcMonCSV(csvfile_path).plotgraph(
        filename=generated_graph_path,
        title=os.path.splitext(os.path.basename(csvfile_path))[0],
        plotfilewrites=False,
        plotfilereads=False,
        plotfiledeletes=False,
        plotfilerenames=False,
        plottcpconnects=False,
        plotudpsends=False,
        plotudprecvs=False,
        plotregreads=False,
        plotregwrites=False,
        plotregdeletes=False,
        showproclabels=True,
        showtcplabels=False,
        showudplabels=False,
        showfilelabels=False,
        showhostlabels=False,
        showreglabels=False,
        graphvizprog=None
    )

    return generated_graph_name
        

def upload_file(request):
    if request.method == 'POST':
        form = FileUploadForm(request.POST, request.FILES)
        if form.is_valid():
            instance = form.save()
            csvfile_path = instance.file.path
            try:
                generated_graph_name = from_csv_to_graph(csvfile_path)
                GeneratedGraph.objects.create(
                    original_file=instance,
                    generated_graph=f"generated_graphs/{generated_graph_name}"
                )
                return redirect('file_list')
            except Exception as e:
                # Handle the exception
                messages.error(request, f"Error processing the file: {str(e)}")
                # Redirect back to the upload page with the error message
                return redirect('upload_file')
    else:
        form = FileUploadForm()
    return render(request, 'logs_visualizing/upload.html', {'form': form})

def file_list(request):
    files = UploadedFile.objects.all()
    graphs = GeneratedGraph.objects.all()
    return render(request, 'logs_visualizing/file_list.html', {'files': files, 'graphs': graphs})

def live_capture(request):
    if request.method == 'POST' and 'start' in request.POST:
        print('\n--===[ Noriben v{}'.format(logs_visualizing.Noriben.__VERSION__))
        script_cwd = os.path.dirname(os.path.abspath(logs_visualizing.Noriben.__file__))
        default_config_location = os.path.join(script_cwd, 'NoribenCustoms', 'Noriben.config')
        logs_visualizing.Noriben.config = logs_visualizing.Noriben.read_config(default_config_location)
        if logs_visualizing.Noriben.config['generalize_paths']:
            logs_visualizing.Noriben.generalize_vars_init()

        pmc_file = os.path.join('NoribenCustoms', 'ProcmonConfiguration.PMC')
        pmc_file_cwd = os.path.join(script_cwd, pmc_file)
        
        if not logs_visualizing.Noriben.file_exists(pmc_file):
            if not logs_visualizing.Noriben.file_exists(pmc_file_cwd):
                logs_visualizing.Noriben.use_pmc = False
                print('[!] Filter file {} not found. Continuing without filters.'.format(pmc_file))
            else:
                logs_visualizing.Noriben.use_pmc = True
                pmc_file = pmc_file_cwd
                print('[*] Using filter file: {}'.format(pmc_file))
        else:
            logs_visualizing.Noriben.use_pmc = True
            print('[*] Using filter file: {}'.format(pmc_file))
            logs_visualizing.Noriben.log_debug('[*] Using filter file: {}'.format(pmc_file))
        
        request.session['pmc_file'] = pmc_file
        procmonexe = os.path.join(settings.PROCMON_ROOT, "Procmon.exe")
        request.session['procmonexe'] = procmonexe
        if not procmonexe:
            print('[!] Unable to find Procmon ({}) in path.'.format(logs_visualizing.Noriben.config['procmon']))
            logs_visualizing.Noriben.terminate_self(2)

        exe_cmdline = ''
        
        # Start main data collection and processing
        print('[*] Using procmon EXE: {}'.format(procmonexe))
        session_id = logs_visualizing.Noriben.get_session_name()
        pml_file = os.path.join(script_cwd, 'NoribenOutput', 'Noriben_{}.pml'.format(session_id))
        request.session['pml_file'] = pml_file
        csv_file = os.path.join(script_cwd, 'NoribenOutput', 'Noriben_{}.csv'.format(session_id))
        request.session['csv_file'] = csv_file

        print('[*] Procmon session saved to: {}'.format(pml_file))

        if exe_cmdline and not logs_visualizing.Noriben.file_exists(exe_cmdline):
            print('[!] Error: Specified malware executable does not exist: {}'.format(exe_cmdline))
            logs_visualizing.Noriben.terminate_self(6)
            
        print('[*] Launching Procmon ...')
        logs_visualizing.Noriben.launch_procmon_capture(procmonexe, pml_file, pmc_file)

        if exe_cmdline:
            print('[*] Launching command line: {}'.format(exe_cmdline))
            try:
                subprocess.Popen(exe_cmdline)
            except OSError as e:  # Occurs if VMWare bug removes Owner from file
                print('[*] Execution failed. File is potentially not an executable.')
                print(e)
                print('[*] Attempting to open with associated application...')
                try:
                    logs_visualizing.Noriben.open_file_with_assoc(exe_cmdline)
                except OSError:
                    print('\n[*] Unexpected termination of Procmon commencing... please wait')
                    print('[!] Error executing file. Windows is refusing execution based upon permissions.')
                    logs_visualizing.Noriben.terminate_procmon(procmonexe)
                    logs_visualizing.Noriben.terminate_self(4)

        else:
            print('[*] Procmon is running. Run your executable now.')
            
        try:
            if logs_visualizing.Noriben.config['human']:
                logs_visualizing.Noriben.human()
        except KeyError:
            pass
        
        messages.warning(request, "Capturing in progress")
        return render(request, 'logs_visualizing/live_capture.html', {'task_running': True})
        

    return render(request, 'logs_visualizing/live_capture.html', {'task_running': False})

def stop_live_capture(request):
    if request.method == 'POST' and 'stop' in request.POST:
        print('\n[*] Termination of Procmon commencing... please wait')
        procmonexe = request.session['procmonexe']
        logs_visualizing.Noriben.terminate_procmon(procmonexe)

        print('[*] Procmon terminated')
        pml_file = request.session['pml_file']
        if not logs_visualizing.Noriben.file_exists(pml_file):
            print('[!] Error creating PML file!')
            logs_visualizing.Noriben.terminate_self(8)

        pmc_file = request.session['pmc_file']
        csv_file = request.session['csv_file']
        logs_visualizing.Noriben.process_pml_to_csv(procmonexe, pml_file, pmc_file, csv_file)
        if not logs_visualizing.Noriben.file_exists(csv_file):
            print('[!] Error detected. Could not create CSV file: {}'.format(csv_file))
            logs_visualizing.Noriben.terminate_self(7)
        else:
            media_root = settings.MEDIA_ROOT
            csv_file_name = os.path.splitext(os.path.basename(csv_file))[0]
            shutil.copy(csv_file, os.path.join(media_root, 'uploads', f"{csv_file_name}.csv"))
            
            try:
                generated_graph_name = from_csv_to_graph(csv_file)
                instance = UploadedFile(file=f"uploads/{csv_file_name}.csv")
                instance.save()
                graph_entry = GeneratedGraph.objects.create(
                    original_file=instance,
                    generated_graph=f"generated_graphs/{generated_graph_name}"
                ).generated_graph.url
                messages.warning(request, format_html("Live capturing complete. View <a href='{}'>graph</a>", graph_entry))
            
            except Exception as e:
                # Handle the exception
                messages.error(request, f"Error processing the file: {str(e)}")
                # Redirect back to the upload page with the error message
                return redirect('live_capture')
        
    return redirect('live_capture')
    